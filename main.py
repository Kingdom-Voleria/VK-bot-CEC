import os
import json
from dotenv import load_dotenv
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from threading import Thread
from flask import Flask

load_dotenv()
TOKEN = os.getenv("VK_GROUP_TOKEN")
KNOWN_USERS_FILE = "known_users.txt"
ADMIN_ID = 443835275


def load_known_users():
    if not os.path.exists(KNOWN_USERS_FILE):
        return set()
    with open(KNOWN_USERS_FILE, "r") as file:
        return set(line.strip() for line in file)


def save_known_user(user_id):
    with open(KNOWN_USERS_FILE, "a") as file:
        file.write(f"{user_id}\n")


def generate_keyboard(labels, one_time=False):
    return json.dumps({
        "one_time": one_time,
        "buttons": [[{"action": {"type": "text", "label": label}, "color": "secondary"}] for label in labels]
    }, ensure_ascii=False)


def get_keyboard():
    return json.dumps({
        "one_time": False,
        "buttons": [[
            {"action": {"type": "text", "label": "–í–æ–ø—Ä–æ—Å —Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ–º", "payload": '{"button": "1"}'}, "color": "primary"},
            {"action": {"type": "text", "label": "–í–æ–ø—Ä–æ—Å —Å —Å–∞–π—Ç–æ–º", "payload": '{"button": "2"}'}, "color": "primary"}
        ]]
    }, ensure_ascii=False)


def get_back_to_main_keyboard():
    return generate_keyboard(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])


def main():
    if not TOKEN:
        print("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    vk_session = vk_api.VkApi(token=TOKEN)
    longpoll = VkLongPoll(vk_session)
    vk = vk_session.get_api()
    known_users = load_known_users()

    user_states = {
        "awaiting_application": set(),
        "awaiting_citizenship_refusal": set(),
        "awaiting_citizenship_feedback": set(),
        "awaiting_site_feedback": set(),
        "awaiting_citizenship_other": set(),
        "awaiting_site_other": set(),
        "awaiting_site_request": set(),
        "awaiting_party_registration": set(),
        "awaiting_vote_request": set(),
        "awaiting_error_report": set(),
    }

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    with open("citizenship_responses.json", "r", encoding="utf-8") as f:
        citizenship_responses = json.load(f)
    with open("site_responses.json", "r", encoding="utf-8") as f:
        site_responses = json.load(f)

    def reset_user(user_id):
        for state in user_states.values():
            state.discard(user_id)

    def handle_response(event, message_dict, category_map):
        message = message_dict[event.text]
        if event.text in category_map:
            user_states[category_map[event.text]].add(str(event.user_id))
        if message:
            vk.messages.send(
                user_id=event.user_id,
                message=message,
                keyboard=get_back_to_main_keyboard(),
                random_id=0
            )

    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me:
            user_id = str(event.user_id)
            msg = event.text.strip()

            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {msg}")

            if user_id not in known_users:
                vk.messages.send(user_id=event.user_id, message="üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –í–æ–ª–µ—Ä–∏—è! \n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –Ω–∞—à–µ–≥–æ –≤–µ–ª–∏–∫–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞. \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –∏ —Å–∞–π—Ç—É, –∞ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. \n‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º!", keyboard=get_keyboard(), random_id=0)
                save_known_user(user_id)
                known_users.add(user_id)
                continue

            if msg == "–í–æ–ø—Ä–æ—Å —Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ–º":
                keyboard = generate_keyboard(list(citizenship_responses.keys()))
                vk.messages.send(user_id=event.user_id, message="üõÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ—á—å –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –í–æ–ª–µ—Ä–∏—è.", keyboard=keyboard, random_id=0)
                continue

            if msg == "–í–æ–ø—Ä–æ—Å —Å —Å–∞–π—Ç–æ–º":
                keyboard = generate_keyboard(list(site_responses.keys()))
                vk.messages.send(user_id=event.user_id, message="üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ä–∞–±–æ—Ç–æ–π —Å–∞–π—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.", keyboard=keyboard, random_id=0)
                continue

            if msg in ("–ù–∞–∑–∞–¥", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
                reset_user(user_id)
                vk.messages.send(user_id=event.user_id, message="üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", keyboard=get_keyboard(), random_id=0)
                continue

            citizenship_map = {
                "–°—Ç–∞—Ç—å –≥–æ—Å. —Å–ª—É–∂–∞—â–∏–º": "awaiting_application",
                "–û—Ç–∫–∞–∑ –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞": "awaiting_citizenship_refusal",
                "–ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ": "awaiting_citizenship_feedback",
                "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞": "awaiting_citizenship_other"
            }
            if msg in citizenship_responses:
                handle_response(event, citizenship_responses, citizenship_map)
                continue

            site_map = {
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ": "awaiting_site_request",
                "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–∏—é –Ω–∞ –≤—ã–±–æ—Ä—ã": "awaiting_party_registration",
                "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è": "awaiting_vote_request",
                "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ": "awaiting_error_report",
                "–ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ": "awaiting_site_feedback",
                "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞": "awaiting_site_other"
            }

            if msg in site_responses:
                handle_response(event, site_responses, site_map)
                continue
            for state, label in [
                ("awaiting_application", "–ó–∞—è–≤–∫–∞ –Ω–∞ –≥–æ—Å—Å–ª—É–∂–±—É"),
                ("awaiting_citizenship_refusal", "–û—Ç–∫–∞–∑ –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞"),
                ("awaiting_citizenship_feedback", "–ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ)"),
                ("awaiting_citizenship_other", "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ (–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ)"),
                ("awaiting_site_request", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ"),
                ("awaiting_party_registration", "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–∏–∏"),
                ("awaiting_vote_request", "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"),
                ("awaiting_error_report", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —Å–∞–π—Ç–µ"),
                ("awaiting_site_feedback", "–ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (—Å–∞–π—Ç)"),
                ("awaiting_site_other", "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ (—Å–∞–π—Ç)")
            ]:
                if user_id in user_states[state]:
                    vk.messages.send(user_id=ADMIN_ID, message=f"üì© {label}:\n\n{msg}", random_id=0)
                    vk.messages.send(user_id=event.user_id, message="‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", keyboard=get_back_to_main_keyboard(), random_id=0)
                    user_states[state].remove(user_id)
                    break
            else:
                vk.messages.send(user_id=event.user_id, message="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard=get_keyboard(), random_id=0)


if __name__ == "__main__":
    app = Flask(__name__)

    @app.route("/")
    def home():
        return "I'm alive!"

    Thread(target=lambda: app.run(host="0.0.0.0", port=8080)).start()
    main()
