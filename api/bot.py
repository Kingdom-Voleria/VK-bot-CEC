from http.server import BaseHTTPRequestHandler
import json
import os
from dotenv import load_dotenv
import vk_api
import hmac
import hashlib

load_dotenv()

TOKEN = os.getenv("VK_GROUP_TOKEN")
SECRET_KEY = os.getenv("VK_SECRET_KEY", "your_secret_key")
ADMIN_ID = 443835275

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_states = {}

def generate_keyboard(labels, one_time=False):
    return json.dumps({
        "one_time": one_time,
        "buttons": [[{"action": {"type": "text", "label": label}, "color": "secondary"}] for label in labels]
    }, ensure_ascii=False)

def get_keyboard():
    return json.dumps({
        "one_time": False,
        "buttons": [[
            {"action": {"type": "text", "label": "–í–æ–ø—Ä–æ—Å —Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ–º", "payload": '{"button": "1"}'}, "color": "primary"},
            {"action": {"type": "text", "label": "–í–æ–ø—Ä–æ—Å —Å —Å–∞–π—Ç–æ–º", "payload": '{"button": "2"}'}, "color": "primary"}
        ]]
    }, ensure_ascii=False)

def get_back_to_main_keyboard():
    return generate_keyboard(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])

def reset_user(user_id):
    if user_id in user_states:
        del user_states[user_id]

def send_message(vk, user_id, message, keyboard=None):
    try:
        vk.messages.send(
            user_id=user_id,
            message=message,
            keyboard=keyboard,
            random_id=0
        )
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def handle_message(vk, user_id, message_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = str(user_id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–≤–µ—Ç—ã
    try:
        with open("citizenship_responses.json", "r", encoding="utf-8") as f:
            citizenship_responses = json.load(f)
        with open("site_responses.json", "r", encoding="utf-8") as f:
            site_responses = json.load(f)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        citizenship_responses = {
            "–°—Ç–∞—Ç—å –≥–æ—Å. —Å–ª—É–∂–∞—â–∏–º": "–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥–æ—Å—Å–ª—É–∂–±—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.",
            "–û—Ç–∫–∞–∑ –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞": "–î–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ. –û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞.",
            "–ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
            "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞": "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å."
        }
        site_responses = {
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ": "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.",
            "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–∏—é –Ω–∞ –≤—ã–±–æ—Ä—ã": "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è": "–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –æ–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
            "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ": "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏ –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.",
            "–ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
            "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞": "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å."
        }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in user_states:
        user_states[user_id] = {"known": True, "state": None}
        welcome_message = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –í–æ–ª–µ—Ä–∏—è! \n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –Ω–∞—à–µ–≥–æ –≤–µ–ª–∏–∫–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞. \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –∏ —Å–∞–π—Ç—É, –∞ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. \n‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º!"
        send_message(vk, user_id, welcome_message, get_keyboard())
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if message_text == "–í–æ–ø—Ä–æ—Å —Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ–º":
        keyboard = generate_keyboard(list(citizenship_responses.keys()))
        send_message(vk, user_id, "üõÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ—á—å –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –í–æ–ª–µ—Ä–∏—è.", keyboard)
        return

    if message_text == "–í–æ–ø—Ä–æ—Å —Å —Å–∞–π—Ç–æ–º":
        keyboard = generate_keyboard(list(site_responses.keys()))
        send_message(vk, user_id, "üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ä–∞–±–æ—Ç–æ–π —Å–∞–π—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.", keyboard)
        return

    if message_text in ("–ù–∞–∑–∞–¥", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        reset_user(user_id)
        send_message(vk, user_id, "üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", get_keyboard())
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤—É
    citizenship_map = {
        "–°—Ç–∞—Ç—å –≥–æ—Å. —Å–ª—É–∂–∞—â–∏–º": "awaiting_application",
        "–û—Ç–∫–∞–∑ –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞": "awaiting_citizenship_refusal",
        "–ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ": "awaiting_citizenship_feedback",
        "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞": "awaiting_citizenship_other"
    }

    if message_text in citizenship_responses:
        user_states[user_id]["state"] = citizenship_map.get(message_text)
        response_message = citizenship_responses.get(message_text, "")
        if response_message:
            send_message(vk, user_id, response_message, get_back_to_main_keyboard())
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Å–∞–π—Ç—É
    site_map = {
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ": "awaiting_site_request",
        "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–∏—é –Ω–∞ –≤—ã–±–æ—Ä—ã": "awaiting_party_registration",
        "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è": "awaiting_vote_request",
        "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ": "awaiting_error_report",
        "–ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ": "awaiting_site_feedback",
        "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞": "awaiting_site_other"
    }

    if message_text in site_responses:
        user_states[user_id]["state"] = site_map.get(message_text)
        response_message = site_responses.get(message_text, "")
        if response_message:
            send_message(vk, user_id, response_message, get_back_to_main_keyboard())
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = user_states[user_id].get("state")
    if current_state:
        state_labels = {
            "awaiting_application": "–ó–∞—è–≤–∫–∞ –Ω–∞ –≥–æ—Å—Å–ª—É–∂–±—É",
            "awaiting_citizenship_refusal": "–û—Ç–∫–∞–∑ –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞",
            "awaiting_citizenship_feedback": "–ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ)",
            "awaiting_citizenship_other": "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ (–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ)",
            "awaiting_site_request": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ",
            "awaiting_party_registration": "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–∏–∏",
            "awaiting_vote_request": "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
            "awaiting_error_report": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —Å–∞–π—Ç–µ",
            "awaiting_site_feedback": "–ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (—Å–∞–π—Ç)",
            "awaiting_site_other": "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ (—Å–∞–π—Ç)"
        }
        
        label = state_labels.get(current_state, "–û–±—Ä–∞—â–µ–Ω–∏–µ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = f"üì© {label}:\n\n{message_text}"
        send_message(vk, ADMIN_ID, admin_message)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_message(vk, user_id, "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", get_back_to_main_keyboard())
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id]["state"] = None
        return

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    send_message(vk, user_id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", get_keyboard())

def verify_vk_signature(request_body, vk_signature):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ VK –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if not SECRET_KEY or SECRET_KEY == "your_secret_key":
        return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    expected_signature = "sha256=" + hmac.new(
        SECRET_KEY.encode(),
        request_body,
        hashlib.sha256
    ).hexdigest()
    
    return hmac.compare_digest(expected_signature, vk_signature)

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        response = {
            "status": "success",
            "message": "VK Bot API is running",
            "bot_status": "active",
            "endpoint": "/api/bot"
        }
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode())
        return

    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç VK"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            request_body = self.rfile.read(content_length)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å VK (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
            vk_signature = self.headers.get('X-Vk-Signature', '')
            if not verify_vk_signature(request_body, vk_signature):
                self.send_response(403)
                self.end_headers()
                return
            
            # –ü–∞—Ä—Å–∏–º JSON
            data = json.loads(request_body.decode('utf-8'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            if data.get('type') == 'confirmation':
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞
                confirmation_code = os.getenv("VK_CONFIRMATION_CODE", "default_code")
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(confirmation_code.encode())
                return
            
            elif data.get('type') == 'message_new':
                # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not TOKEN:
                    self.send_response(500)
                    self.end_headers()
                    return
                
                try:
                    vk_session = vk_api.VkApi(token=TOKEN)
                    vk = vk_session.get_api()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_obj = data.get('object', {})
                    user_id = message_obj.get('from_id')
                    message_text = message_obj.get('text', '')
                    
                    if user_id and message_text:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        handle_message(vk, user_id, message_text)
                    
                    # –û—Ç–≤–µ—á–∞–µ–º VK
                    self.send_response(200)
                    self.send_header('Content-type', 'text/plain')
                    self.end_headers()
                    self.wfile.write('ok'.encode())
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    self.send_response(200)
                    self.send_header('Content-type', 'text/plain')
                    self.end_headers()
                    self.wfile.write('ok'.encode())
                
                return
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write('ok'.encode())
                return
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self.send_response(500)
            self.end_headers()
            return

    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Vercel"""
        pass
